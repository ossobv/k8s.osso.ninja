# Deploy Django app which
# uses Redis as backend for storing
# 'chat' messages.
#
# Exposes port: 8080
#
# Connects to redis using internal DNS resolving to the redis-service
#
# Uses an environment variable to pass the value for the Redis host.

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  namespace: {NAMESPACE}
  name: django-deployment
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: django-app
    spec:
      containers:
      - name: django-container
        image: hub.osso.io/public/django-websocket-redis:latest
        ports:
        - containerPort: 8080
        env:
        - name: WS4REDIS_HOST
          value: "redis-service"
        # Use "redis-service" (the name of the service) as environment variable WS4REDIS_HOST
        # Kubernetes internally automatically resolves redis-service to the service IP which can be used to connect
        # to Redis.
        #
        # Note: the pod connects to the service, which routes to the Redis pod

---

# Expose the django-app via a service

apiVersion: v1
kind: Service
metadata:
  namespace: {NAMESPACE}
  name: django-service
spec:
  ports:
    - port: 8080
  selector:
    app: django-app

---

# Expose the django-service
# via {NAMESPACE}.osso.ninja

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    ingress.kubernetes.io/ssl-redirect: "true"
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "true"
  namespace: {NAMESPACE}
  name: django-ingress
spec:
  tls:
  - hosts:
    -  {NAMESPACE}.osso.ninja
    secretName: {NAMESPACE}-nginx-tls
  rules:
  - host: {NAMESPACE}.osso.ninja
    http:
      paths:
      - path: /
        backend:
          serviceName: django-service
          servicePort: 8080

---

# Second deployment containing a single redis
# instance.
#
# Expose port 6379

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  namespace: {NAMESPACE}
  name: redis-deployment
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: redis-app
    spec:
      containers:
      - name: redis-container
        image: redis
        ports:
        - containerPort: 6379

---

# Expose the Redis pod via a service
# on port 6379

apiVersion: v1
kind: Service
metadata:
  namespace: {NAMESPACE}
  name: redis-service
spec:
  ports:
    - port: 6379
  selector:
    app: redis-app
